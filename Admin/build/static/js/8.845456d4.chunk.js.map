{"version":3,"sources":["contexts/cats/index.tsx","services/read/index.ts","utils/index.ts","services/update/index.ts","services/delete/index.ts","services/create/index.ts","hooks/cats/index.ts","pages/cats/action.tsx","pages/cats/modal.tsx","pages/cats/list.tsx","pages/cats/index.tsx"],"names":["CatsContext","createContext","CatsProvider","props","useState","visible","setVisible","search","setSearch","useEffect","Provider","value","children","parseData","snapshot","data","forEach","doc","push","key","id","resolveHandling","Promise","resolve","empty","lastDoc","docs","length","rejectHandling","error","reject","read","collection","orderBy","a","undefined","firebase","firestore","where","fieldPath","direction","startAfter","limit","get","then","catch","createKeyword","title","arrTitle","currTitle","split","item","generateKeyword","keywords","titles","toLowerCase","i","slice","Number","join","Set","storage","localStorage","getItem","store","setItem","destroy","clear","removeItem","setNumber","arr","map","index","no","update","docId","createdAt","FieldValue","serverTimestamp","remove","delete","create","add","useCats","form","useContext","isLoading","setLoading","datasource","setDatasource","setLastDoc","reset","useCallback","resetFields","window","location","pathname","readData","result","notification","message","description","loadMoreData","currentValue","concat","createData","values","image","file","fileName","uid","name","uploadFile","imageURL","isSoldOut","success","updateData","isPath","deleteData","Modal","confirm","okText","cancelText","icon","centered","onOk","Actions","className","Search","placeholder","onSearch","type","shape","onClick","PlusOutlined","memo","Modals","closable","footer","layout","onFinish","Item","shouldUpdate","noStyle","label","rules","required","validator","_","includes","Error","style","width","fileList","beforeUpload","UploadOutlined","ghost","size","getFieldValue","Option","TextArea","textAlign","disabled","htmlType","loading","React","Lists","columns","dataIndex","render","overflow","borderRadius","cursor","wrapperStyle","objectFit","src","alt","fixed","newItem","setFieldsValue","EditOutlined","danger","DeleteOutlined","spinning","indicator","SyncOutlined","fontSize","spin","padding","initialLoad","pageStart","loadMore","hasMore","useWindow","dataSource","pagination","UserComponent","Form","useForm","useUser","Layout","Wrapper"],"mappings":"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","file":"static/js/8.845456d4.chunk.js","sourcesContent":["import React, {createContext, Dispatch, useEffect, useState} from \"react\";\n\ntype ContextProps = [\n    visible       : boolean,\n    setVisible    : Dispatch<boolean>,\n    search        : string,\n    setSearch     : Dispatch<string>,\n]\n\nexport const CatsContext = createContext<ContextProps>({} as ContextProps);\n\nexport const CatsProvider : React.FC = (props) => {\n\n    const [visible, setVisible] = useState<boolean>(false);\n    const [search, setSearch]   = useState<string>(\"\");\n\n    useEffect(() => {\n\n        setSearch(\"\");\n    }, []);\n\n    return (\n        <CatsContext.Provider value={[visible, setVisible, search, setSearch]}>\n            {props.children}\n        </CatsContext.Provider>\n    )\n}\n","import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\n\nexport const parseData = (snapshot : firebase.firestore.QuerySnapshot) => {\n\n    let data: any[];\n\n    data = [];\n\n    snapshot.forEach(doc => {\n\n        data.push({...doc.data(), key: doc.id});\n    });\n\n    return data;\n}\n\nconst resolveHandling = (snapshot : firebase.firestore.QuerySnapshot) => {\n    return Promise.resolve({\n        data    : !snapshot.empty ? parseData(snapshot) : [],\n        lastDoc : !snapshot.empty ? snapshot.docs[snapshot.docs.length - 1] : null\n    });\n}\n\nconst rejectHandling = (error : Error) => {\n    return Promise.reject(error);\n}\n\nexport async function read(collection : string, orderBy : {fieldPath : string, direction : \"desc\" | \"asc\"}, lastDoc : firebase.firestore.QuerySnapshot | undefined = undefined, search : { fieldPath : string, value : string}) : Promise<any>{\n\n    return lastDoc !== undefined\n        ? firebase.firestore()\n            .collection(collection)\n            .where(search.fieldPath, \"array-contains\", search.value)\n            .orderBy(orderBy.fieldPath, orderBy.direction)\n            .startAfter(lastDoc)\n            .limit(10)\n            .get()\n            .then(resolveHandling)\n            .catch(rejectHandling)\n\n        : firebase.firestore()\n            .collection(collection)\n            .where(search.fieldPath, \"array-contains\", search.value)\n            .orderBy(orderBy.fieldPath, orderBy.direction)\n            .limit(20)\n            .get()\n            .then(resolveHandling)\n            .catch(rejectHandling);\n}\n\nexport async function readById(collection : string, docId : string) : Promise<any>{\n    return firebase.firestore()\n        .collection(collection)\n        .doc(docId)\n        .get()\n        .then(doc => {\n            return Promise.resolve({...doc.data(), key : doc.id});\n        })\n        .catch(error => {\n            return Promise.reject(error);\n        });\n}\n\nexport async function readAll(collection : string) : Promise<any> {\n    return firebase.firestore()\n        .collection(collection)\n        .get()\n        .then(resolveHandling)\n        .catch(rejectHandling)\n}\n\nexport async function readWhere(collection : string, filePath : string, operator : firebase.firestore.WhereFilterOp, value : string) {\n    return firebase.firestore()\n        .collection(collection)\n        .where(filePath, operator, value)\n        .get()\n        .then(resolveHandling)\n        .catch(rejectHandling)\n}","export const sleep = (ms : number) : Promise<void> => {\n\n    return new Promise<void>(resolve => {\n\n        setTimeout(() => resolve(), ms)\n    });\n}\n\nconst createKeyword = (title : string) => {\n\n    const arrTitle : string[] = [];\n    let currTitle  = \"\";\n\n    title.split(\"\").forEach(item => {\n        currTitle += item;\n        arrTitle.push(currTitle);\n    })\n\n    return arrTitle;\n};\n\nexport const generateKeyword = (title : string) => {\n\n    const keywords = [];\n    const titles   = title.toLowerCase().split(\" \");\n\n    for (let i in titles) {\n\n        keywords.push(...createKeyword(titles.slice(Number(i), titles.length).join(\" \")))\n    }\n\n    return [\n        // @ts-ignore\n        ...new Set([\"\", ...keywords])\n    ]\n};\n\nexport const storage = (key : string, value : string = \"\") => {\n\n    function get() : string | null {\n\n        return localStorage.getItem(key)\n    }\n\n    function store() : void {\n\n        localStorage.setItem(key, value);\n    }\n\n    function destroy() {\n\n        if (key === \"all\") {\n\n            localStorage.clear();\n        } else {\n\n            localStorage.removeItem(key);\n        }\n    }\n\n\n    return {\n        get,\n        store,\n        destroy\n    }\n}\n\nexport const setNumber = (arr : any[]) => {\n\n    return arr.map((item, index) => ({...item, no : index + 1}));\n}\n\nexport const pagination = (array : any[], page_size : number, page_number : number)  : any[] => {\n    // human-readable page numbers usually start with 1, so we reduce 1 in the first argument\n    return array.slice((page_number - 1) * page_size, page_number * page_size);\n};\n\nexport const filter = (report : any[], fields : string[], value : string) => {\n\n    return report.filter(item => {\n\n        let keywords = fields.map(field => item[field]).join(\" \");\n\n        return keywords.toLowerCase().search(value) !== -1;\n    });\n}","import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\n\nfunction update(collection : string, docId : string, data : object) : Promise<void> {\n    return firebase.firestore()\n        .collection(collection)\n        .doc(docId)\n        .update({...data, createdAt : firebase.firestore.FieldValue.serverTimestamp()})\n}\n\nexport default update","import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\n\nfunction remove(collection : string, docId : string) : Promise<void> {\n    return firebase.firestore()\n        .collection(collection)\n        .doc(docId)\n        .delete()\n}\n\nexport default remove;","import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\n\nfunction create(collection : string, data : object) : Promise<firebase.firestore.DocumentReference<firebase.firestore.DocumentData>> {\n\n    return firebase.firestore().collection(collection).add({...data, createdAt : firebase.firestore.FieldValue.serverTimestamp()});\n}\n\nexport default create;","import {useCallback, useContext, useEffect, useState} from \"react\";\nimport {Modal, notification} from \"antd\";\nimport {read} from \"services/read\";\nimport {generateKeyword, setNumber, storage} from \"utils\";\nimport {Cats} from \"interfaces\";\nimport {CatsContext} from \"contexts/cats\";\nimport update from \"services/update\";\nimport {FormInstance} from \"antd/es/form\";\nimport firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport remove from \"services/delete\";\nimport create from \"services/create\";\nimport {Store} from \"rc-field-form/lib/interface\";\nimport uploadFile from \"services/upload\";\n\ntype Values = [\n    isLoading    : boolean,\n    datasource   : Cats[],\n    loadMoreData : () => Promise<void>,\n    createData   : (values : Store) => Promise<void>,\n    updateData   : (docId : string, data : Cats) => Promise<void>,\n    deleteData   : (docId : string) => Promise<void>,\n]\n\nfunction useCats(form : FormInstance | undefined) : Values {\n\n    const [, setVisible, search]      = useContext(CatsContext);\n    const [isLoading, setLoading]     = useState<boolean>(false);\n    const [datasource, setDatasource] = useState<Cats[]>([]);\n    const [lastDoc, setLastDoc]       = useState<firebase.firestore.QuerySnapshot | undefined>();\n\n    const reset = useCallback(() => {\n\n        form?.resetFields();\n\n        storage(window.location.pathname).destroy();\n\n        setVisible(false);\n\n        setLoading(false);\n\n    }, [form, setVisible]);\n\n    const readData = useCallback( async () => {\n        try {\n\n            setLoading(true);\n\n            const result = await read(\"cats\", {fieldPath : \"createdAt\", direction : \"desc\"}, undefined, {fieldPath : \"keywords\", value : search});\n\n            setDatasource(setNumber(result.data));\n\n            setLastDoc(result.lastDoc);\n\n        } catch (e) {\n\n            notification.error({\n                message : e.message,\n                description : e.description\n            });\n        } finally {\n\n            setLoading(false);\n        }\n    }, [search]);\n\n    const loadMoreData = useCallback(async () => {\n        try {\n\n            setLoading(true);\n\n            const result = await read(\"cats\", {fieldPath : \"createdAt\", direction : \"desc\"}, lastDoc, {fieldPath : \"keywords\", value : search});\n\n            setDatasource(currentValue => setNumber(currentValue.concat(result.data)));\n\n            setLastDoc(result.lastDoc);\n\n        } catch (e) {\n\n            notification.error({\n                message : e.message,\n                description : e.description\n            });\n        } finally {\n\n            setLoading(false);\n        }\n    }, [lastDoc, search]);\n\n    const createData = useCallback(async (values : Store) => {\n        try {\n\n            setLoading(true);\n\n            const image = values[`imageURL`]?.file\n\n            const fileName = `${image.uid}-${image.name}`;\n\n            await uploadFile(`/cats/${fileName}`, image);\n\n            delete values[`imageURL`];\n\n            await create(\"cats\", {\n                ...values,\n                imageURL : `https://storage.googleapis.com/scotish-fold.appspot.com/cats/${fileName}`,\n                keywords : generateKeyword(`${values.title}  ${values.isSoldOut}`)\n            });\n\n            notification.success({\n                message : `Listing berhasil ditambahkan`\n            });\n\n        } catch (e) {\n\n            notification.error({\n                message : e.message,\n                description : e.description\n            });\n        } finally {\n\n            await readData();\n\n            reset();\n        }\n    }, [readData, reset]);\n\n    const updateData = useCallback( async (docId : string, values : Store) => {\n        try {\n\n            setLoading(true);\n\n            if (values[`imageURL`]?.file.isPath){\n\n                delete values[`imageURL`];\n\n                await update(\"cats\", docId, {\n                    ...values,\n                    keywords : generateKeyword(`${values.title} ${values.isSoldOut}`)\n                });\n\n            } else {\n\n                const image = values[`imageURL`]?.file\n\n                const fileName = `${image.uid}-${image.name}`;\n\n                await uploadFile(`/cats/${fileName}`, image);\n\n                delete values[`imageURL`];\n\n                await update(\"cats\", docId, {\n                    ...values,\n                    imageURL : `https://storage.googleapis.com/scotish-fold.appspot.com/cats/${fileName}`,\n                    keywords : generateKeyword(`${values.title} ${values.isSoldOut}`)\n                });\n            }\n\n            notification.success({ message : `Listing berhasil diperbarui.`});\n\n        } catch (e) {\n\n            notification.error({\n                message : e.message,\n                description : e.description\n            })\n\n        } finally {\n\n            await readData();\n\n            reset();\n        }\n    }, [readData, reset]);\n\n    const deleteData = useCallback( async (docId : string) => {\n\n        Modal.confirm({\n            title : `Apa anda yakin menghapus listing ini?`,\n            okText : \"Ya, saya yakin\",\n            cancelText : \"Batal\",\n            icon : null,\n            centered : true,\n            onOk : async () => {\n                try {\n\n                    setLoading(true);\n\n                    await remove(\"cats\", docId);\n\n                    notification.success({\n                        message : `Listing berhasil dihapus.`\n                    });\n\n                } catch (e) {\n\n                    notification.error({\n                        message : e.message,\n                        description : e.description\n                    })\n                } finally {\n\n                    await readData();\n\n                    setLoading(false);\n                }\n            }\n        })\n    }, [readData]);\n\n    useEffect(() => {\n\n        readData();\n\n    }, [readData]);\n\n    return [isLoading, datasource, loadMoreData, createData, updateData, deleteData];\n}\n\nexport default useCats;","import React, {FC, memo, useContext} from \"react\";\nimport {Button, Input, Space} from \"antd\";\nimport {CatsContext} from \"contexts/cats\";\nimport {PlusOutlined} from \"@ant-design/icons\";\n\ninterface Props {\n\n}\n\nconst Actions : FC<Props> = () => {\n\n    const [, setVisible,, setSearch] = useContext(CatsContext);;\n\n    return (\n        <div className={\"action-container\"}>\n            <div className={\"action-section\"}>\n                <Space>\n                    <Input.Search placeholder={\"Cari...\"} onSearch={(value) => setSearch(value)} />\n                    <Button type={\"primary\"} shape={\"circle\"} onClick={() => { setVisible(true) }}>\n                        <PlusOutlined />\n                    </Button>\n                </Space>\n            </div>\n        </div>\n    )\n}\n\nexport default memo(Actions);","import React, {useContext} from \"react\";\nimport {Button, Form, Input, Modal, Select, Space, Upload} from \"antd\";\nimport {CatsContext} from \"contexts/cats\";\nimport {storage} from \"utils\";\nimport {FormInstance} from \"antd/es/form\";\nimport {Cats} from \"interfaces\";\nimport {UploadOutlined} from \"@ant-design/icons\";\nimport {Store} from \"rc-field-form/lib/interface\";\n\ninterface Props {\n    isLoading   : boolean,\n    form        : FormInstance,\n    updateData  : (docId : string, data : Cats) => Promise<void>,\n    createData  : (values : Store) => Promise<void>,\n}\n\nconst Modals : React.FC<Props> = ({isLoading, form, updateData, createData}) => {\n\n    const [visible, setVisible] = useContext(CatsContext);\n    const docId                 = storage(window.location.pathname).get();\n\n    return (\n        <Modal\n            title={null}\n            centered={true}\n            closable={false}\n            visible={visible}\n            footer={null}\n            className={\"cats-modal-container\"}\n        >\n            <Form\n                layout={\"vertical\"}\n                form={form}\n                onFinish={values => docId ? updateData(docId as string, values) : createData(values)}\n            >\n\n                <Form.Item shouldUpdate={true} noStyle={true}>\n                    {\n                        (form) => (\n                            <Form.Item\n                                label=\"Gambar\"\n                                name={`imageURL`}\n                                rules={[{required: true, message: 'Gambar wajib diisi!'},\n                                    () => ({\n                                        validator(_, value) {\n\n                                            const type = ['image/jpg', 'image/jpeg', 'image/png'];\n\n                                            if (type.includes(value?.file.type)) {\n\n                                                return Promise.resolve()\n                                            } else {\n\n                                                return Promise.reject(new Error(\"File harus berupa gambar.\"))\n                                            }\n                                        }\n                                    })\n                                ]}\n                            >\n                                <Upload\n                                    style={{width : \"100%\"}}\n                                    fileList={[]}\n                                    beforeUpload={() => false}\n                                >\n                                    <div className={\"image-form\"}>\n                                        <Space>\n                                            <Button\n                                                type={\"default\"}\n                                                icon={<UploadOutlined />}\n                                                ghost={false}\n                                                shape={\"circle\"}\n                                                size={\"small\"}\n                                            />\n                                            {form.getFieldValue(`imageURL`)?.file?.name}\n                                        </Space>\n                                    </div>\n\n                                </Upload>\n                            </Form.Item>\n                        )\n                    }\n                </Form.Item>\n\n                <Form.Item\n                    label=\"Judul\"\n                    name={`title`}\n                    rules={[{ required: true, message: 'Judul wajib diisi!' }]}\n                >\n                    <Input size={\"large\"} />\n                </Form.Item>\n\n                <Form.Item\n                    label=\"Status\"\n                    name={\"isSoldOut\"}\n                    rules={[{ required: true, message: 'Status akun wajin diisi.' }]}\n                >\n                    <Select size={\"large\"}>\n                        <Select.Option value={'terjual'}>Terjual</Select.Option>\n                        <Select.Option value={'belum'}>Belum Terjual</Select.Option>\n                    </Select>\n                </Form.Item>\n\n                <Form.Item\n                    label=\"Deskripsi\"\n                    name={`description`}\n                    rules={[{ required: true, message: 'Deskripsi wajib diisi!' }]}\n                >\n                    <Input.TextArea />\n                </Form.Item>\n\n                <Form.Item>\n                    <div style={{textAlign : \"right\"}}>\n                        <Space>\n                            <Button\n                                size={\"large\"}\n                                type={\"default\"}\n                                onClick={() => {\n                                    form.resetFields();\n                                    setVisible(false);\n                                    storage(window.location.pathname).destroy();\n                                }}\n                                disabled={isLoading}\n                            >\n                                Batal\n                            </Button>\n                            <Button\n                                size={\"large\"}\n                                type={\"primary\"}\n                                htmlType={\"submit\"}\n                                loading={isLoading}\n                            >\n                                Simpan\n                            </Button>\n                        </Space>\n                    </div>\n                </Form.Item>\n            </Form>\n        </Modal>\n    )\n}\n\nexport default React.memo(Modals);","import React, {FC, memo, useContext} from \"react\";\nimport {Button, Image, Space, Spin, Table} from \"antd\";\nimport {DeleteOutlined, EditOutlined, SyncOutlined} from \"@ant-design/icons\";\nimport {Cats} from \"interfaces\";\nimport {FormInstance} from \"antd/es/form\";\nimport InfiniteScroll from \"react-infinite-scroller\";\nimport {storage} from \"utils\";\nimport {CatsContext} from \"contexts/cats\";\nimport \"firebase/firestore\";\n\ninterface Props {\n    isLoading    : boolean,\n    datasource   : Cats[],\n    loadMoreData : () => Promise<void>,\n    form         : FormInstance,\n    deleteData   : (docId : string) => Promise<void>\n}\n\nconst Lists : FC<Props> = ({isLoading, datasource, loadMoreData, form, deleteData}) => {\n\n    const [, setVisible] = useContext(CatsContext);\n\n    const columns = [\n        {\n            title: 'No',\n            dataIndex: 'no',\n            key: 'no',\n        },\n        {\n            title: 'Gambar',\n            dataIndex: 'imageURL',\n            key: 'imageURL',\n            render : (value : string) => (\n                <div\n                    style={{\n                        width : 100,\n                        overflow: \"hidden\",\n                        borderRadius : 10\n                    }}\n                >\n                    <Image style={{cursor: \"pointer\"}} wrapperStyle={{objectFit : \"cover\"}} src={value} alt={\"\"}/>\n                </div>\n            )\n        },\n        {\n            title: 'Judul',\n            dataIndex: 'title',\n            key: 'title',\n        },\n        {\n            title: 'Status',\n            dataIndex: 'isSoldOut',\n            key: 'isSoldOut',\n        },\n        {\n            title: 'Deskripsi',\n            dataIndex: 'description',\n            key: 'description',\n        },\n        {\n            title: '',\n            dataIndex: 'key',\n            key: 'key',\n            fixed: 'right' as 'right',\n            width: 100,\n            render : (value : string, item : Cats) => (\n                <Space>\n                    <Button\n                        type={\"primary\"}\n                        shape={\"circle\"}\n                        ghost={true}\n                        onClick={() => {\n                            const newItem = {\n                                ...item,\n                                imageURL : {\n                                    file : {\n                                        name : item.imageURL,\n                                        isPath : true,\n                                        type : \"image/jpg\"\n                                    }\n                                }\n                            }\n                            form.setFieldsValue(newItem);\n                            storage(window.location.pathname, value).store();\n                            setVisible(true);\n                        }}\n                    >\n                        <EditOutlined/>\n                    </Button>\n                    <Button\n                        type={\"primary\"}\n                        shape={\"circle\"}\n                        ghost={true}\n                        danger={true}\n                        onClick={ async () => {\n                            await deleteData(value)\n                        }}\n                    >\n                        <DeleteOutlined />\n                    </Button>\n                </Space>\n            )\n        },\n    ];\n\n    return (\n        <Spin spinning={isLoading} indicator={<SyncOutlined style={{ fontSize: 24 }} spin />}>\n            <div className={\"list-container\"} style={{padding : 0}}>\n                <InfiniteScroll\n                    initialLoad={false}\n                    pageStart={0}\n                    loadMore={loadMoreData}\n                    hasMore={!isLoading}\n                    useWindow={false}\n                >\n                    <div className={'user-list'}>\n                        <Table\n                            dataSource={datasource}\n                            columns={columns}\n                            pagination={false}\n                        />\n                    </div>\n                </InfiniteScroll>\n            </div>\n        </Spin>\n    )\n}\n\nexport default memo(Lists);","import React from \"react\";\nimport Component from \"components\";\nimport {CatsProvider} from \"contexts/cats\";\nimport {Form} from \"antd\";\nimport useUser from \"hooks/cats\";\nimport Actions from \"./action\";\nimport Modals from \"./modal\";\nimport Lists from \"./list\";\n\nconst UserComponent : React.FC = () => {\n\n    const [form] = Form.useForm();\n    const [isLoading, datasource, loadMoreData, createData, updateData, deleteData] = useUser(form);\n\n    return (\n        <Component.Layout>\n            <section className={\"main-cats\"}>\n                <Actions />\n                <Modals\n                    isLoading={isLoading}\n                    form={form}\n                    updateData={updateData}\n                    createData={createData}\n                />\n                <Lists\n                    isLoading={isLoading}\n                    datasource={datasource}\n                    loadMoreData={loadMoreData}\n                    deleteData={deleteData}\n                    form={form}\n                />\n            </section>\n        </Component.Layout>\n    )\n}\n\nconst Wrapper : React.FC = () => {\n\n    return (\n        <CatsProvider>\n            <UserComponent />\n        </CatsProvider>\n    )\n}\n\nexport default Wrapper"],"sourceRoot":""}